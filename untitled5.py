# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kjsEOj4gxL9MxuozwB5abCWwTgd6ao0Y
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/employe.csv")
data.head(15)

data.shape

data.isna().sum()

# Remove rows with missing values
df = df.dropna()

# Check again to confirm no missing values
print(df.isna().sum())

print(data.columns)

data.rename(columns=lambda x: x.strip().lower(), inplace=True)

print(data.columns)

plt.boxplot(data['age'])
plt.title("Boxplot for Age")
plt.show()

data = data[(data['age'] >= 17) & (data['age'] <= 75)]

print(data.columns)

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()

data.loc[:, 'gender'] = encoder.fit_transform(data['gender'])
data.loc[:, 'education level'] = encoder.fit_transform(data['education level'])
data.loc[:, 'job title'] = encoder.fit_transform(data['job title'])
data.loc[:, 'salary'] = encoder.fit_transform(data['salary'])

X = data.drop(columns=['salary'])  # Independent variables (features)
Y = data['salary']                 # Dependent variable (target)

print(X.head())
print(Y.head())

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)  # Fit and transform X

# Optional: You can convert it back to DataFrame to keep column names
X = pd.DataFrame(X_scaled, columns=X.columns)

print(X.head())

print(Y.value_counts())

# Step 1: Combine X and Y temporarily
df = pd.concat([X, Y], axis=1)

# Step 2: Remove entries where the 'salary' (Y) occurs less than 2 times
df = df[df['salary'].map(df['salary'].value_counts()) >= 2]

# Step 3: Split X and Y again
X = df.drop(columns='salary')
Y = df['salary']

# Step 4: Retry train-test split
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(
    X, Y, test_size=0.2, random_state=42, stratify=Y
)

# Step 5: Confirm shape
print("Training set shape:", x_train.shape)
print("Test set shape:", x_test.shape)

import numpy as np
print(np.isnan(x_train).sum())   # Total NaN values in x_train
print(np.isnan(x_test).sum())    # Total NaN values in x_test

from sklearn.impute import SimpleImputer

# Create the imputer for both numeric and categorical data
imputer = SimpleImputer(strategy='most_frequent')

# Fit the imputer on training data and transform both train and test sets
x_train = imputer.fit_transform(x_train)
x_test = imputer.transform(x_test)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train, y_train)
y_pred = knn.predict(x_test)

print("Predictions (first 10):", y_pred[:10])

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Example: Convert continuous salary to categories
def convert_salary(salary):
    if salary < 20000:
        return 'Low'
    elif salary < 50000:
        return 'Medium'
    else:
        return 'High'

data['salary_range'] = data['salary'].apply(convert_salary)

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

